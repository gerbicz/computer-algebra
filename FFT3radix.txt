# Radix-3 FFT, sima FFT kodombol nehany rutint atvettem

# n (kulonbozo) primosztoinak meghatarozasa O(sqrt(n)) idoben
# (primitiv egyseggyok megkeresesehez)
# output az n primosztoi (multiplicitas nelkul)
def TrialDivision(n):
   a,p=[],2
   while p**2<=n:
      if n%p==0:
         while n%p==0:
               n=n//p
         a+=[p]
      p+=1
   # while ciklusbol kileptunk, ekkor n prim vagy 1
   if n>1:
      a+=[n]
   return a

# egy n-edik primitiv egyseggyok megkeresese mod p
# ilyen pontosan akkor van, ha p-1 oszthato n-nel
def FindPrimitiveRoot(p,n):
   if (p-1)%n>0:
      print "Nincs ",n,"-dik primitiv egyseggyok GF(",p,")-ben!"
      return
   a=TrialDivision(p-1)
   S=GF(p)
   G=S(2)
   while 1:
     found=True
     for q in a:
         if G**((p-1)//q)==1: # ha ez igaz, akkor G nem primitiv gyok
            found=False
            break
     if found==True:
        return G**((p-1)//n)
     G+=1

# N 3 hatvany
# w N-edik primitiv egyseggyok
# prgy 3-dik primitiv egyseggyok, ketto kozul ez legyen prgy=w**(N//3)
# sima FFT-radix-2-ben ez tulajdonkeppen prgy=-1 lenne
# Szimmetria feltetel itt w[N//3+i]=prgy*w[i] tovabba w[2*N//3+i]=prgy**2*w[i], ha 0<=i<N//3
# a max (N-1)-edfoku polinom
def FFT3(N,w,prgy,a,p):
    e=a.coeffs()
    e+=[0]*(N-len(e)) # 0-kkal kiegeszitem, hogy N hosszu legyen a polinom-egyutthato lista
    A=[0]*N
    if N==1:
       A[0]=a[0]
    else:
       # a(x)=b(x^3)+x*c(x^3)+x^2*d(x^3) felbontas elkeszitese
       b=sum(e[3*i]*x**i for i in range(N//3))
       c=sum(e[3*i+1]*x**i for i in range(N//3))
       d=sum(e[3*i+2]*x**i for i in range(N//3))
       B=FFT3(N//3,w**3,prgy,b,p)
       C=FFT3(N//3,w**3,prgy,c,p)
       D=FFT3(N//3,w**3,prgy,d,p)
       S=GF(p)
       MULT=S(1)
       for i in range(N//3):
           # MULT=w**i teljesul
           # szimmetria feltetelt hasznalva:
           A[i]=B[i]+MULT*C[i]+MULT**2*D[i]
           A[i+N//3]=B[i]+MULT*prgy*C[i]+MULT**2*prgy**2*D[i]
           A[i+2*N//3]=B[i]+MULT*prgy**2*C[i]+MULT**2*prgy*D[i]
           MULT*=w
    return A


# a,b polinomok Z_p[x]-ben, m,n a fokszam
# a*b az output
def FFT3RadixMultiply(a,b,p):
    m=a.degree()
    n=b.degree()
    N=1
    # n+m-nel nagyobb legkisebb 3 hatvany megkeresese
    while N<=n+m:
          N*=3
    w=FindPrimitiveRoot(p,N)
    prgy=w**(N//3)
    A=FFT3(N,w,prgy,a,p)
    B=FFT3(N,w,prgy,b,p)
    C=sum(A[i]*B[i]*x**i for i in range(N))
    c=FFT3(N,1/w,1/prgy,C,p) # inverz FFT-ben a primitiv 3-dik egyseggyoknek is az inverze kell
    return sum(c[i]*x**i for i in range(N))/N

# orai pelda megoldasa FFT3Radix-al,
# de mas gyuru felett (Z_41-ben nincs 9-dik egyseggyok)
p=109
R.<x>=PolynomialRing(GF(p))
a=R(3*x^3+x^2-4*x+1)
b=R(x^3+2*x^2+5*x-3)
FFT3RadixMultiply(a,b,p)
